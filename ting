#!/usr/bin/python

from __future__ import print_function
import time
import socket
from stem import CircStatus, OperationFailed, InvalidRequest, InvalidArguments, CircuitExtensionFailed
from stem.control import Controller, EventType
import sys
from random import choice, shuffle
import os
import subprocess
from pprint import pprint
import Queue
import inspect
import re
from datetime import datetime
import argparse
import traceback
import os.path
from os.path import join, dirname, isfile
sys.path.append(join(dirname(__file__), 'libs'))
from SocksiPy import socks
import json
import random
import signal
import urllib2
from struct import pack, unpack
from select import select
import glob

SOCKS_HOST = '127.0.0.1'
SOCKS_TYPE = socks.PROXY_TYPE_SOCKS5
RESULT_DIRECTORY = "results"
EMAIL_ADDR = None # set this to your email address to get email notifications


class Color:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    SUCCESS = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    END = '\033[0m'

def success(msg):
	sys.stdout.write(Color.SUCCESS + "{0} {1}\n".format(datetime.now(), msg) + Color.END)
	sys.stdout.flush()

def warning(msg):
	sys.stdout.write(Color.WARNING + "{0} {1}\n".format(datetime.now(), msg) + Color.END)
	sys.stdout.flush()

def failure(msg):
	sys.stdout.write(Color.FAIL + "{0} [ERROR] {1}\n".format(datetime.now(), msg) + Color.END)
	sys.stdout.flush()
	sys.exit(-1)

def log(msg):
	sys.stdout.write("{0} {1}\n".format(datetime.now(), msg))
	sys.stdout.flush()

def notify(type, msg):
  if EMAIL_ADDR:
		os.system("echo '{0}' | mailx -s 'Ting {1}' '{2}'".format(msg, type, EMAIL_ADDR))

def get_current_log():
	return RESULT_DIRECTORY+"/"+str(datetime.now()).split()[0] + ".json"

class NotReachableException(Exception):
	def __init__(self, msg, func, dest):
		self.msg = msg
		self.func = func
		self.dest = dest

class CircuitConnectionException(Exception):
	def __init__(self, msg, circuit, exc):
		self.msg = msg
		self.circuit = circuit
		self.exc = exc

class TingClient():
	def __init__(self, config, result_queue, flush_to_file):
		self.config = config
		self.controller_port = config['ControllerPort']
		self.socks_port = config['SocksPort']
		self.destination_port = config['DestinationPort']
		self.num_samples = config['NumSamples']
		self.num_repeats = config['NumRepeats']
		self.source_addr = config['SourceAddr']
		self.destination_addr = config['DestinationAddr']
		self.socks_timeout = config['SocksTimeout']
		self.max_circuit_builds = config['MaxCircuitBuildAttempts']
		self.w_addr, self.w_fp = config['W'].split(',')
		self.z_addr, self.z_fp = config['Z'].split(',')
		self.result_queue = result_queue
		self.flush_to_file = flush_to_file
		self.parse_relay_list(config['RelayList'], int(config['RelayCacheTime']))
		self.controller = self.initialize_controller()
		success("Controller initialized on port {0}. Talking to Tor on port {1}.".format(self.controller_port, self.socks_port))
		self.setup_job_queue(config['Pair'], config['InputFile'])
		if 'ResultDirectory' in config:
			global RESULT_DIRECTORY
			RESULT_DIRECTORY = config['ResultDirectory']
		self.recently_updated = False
		self.daily_pairs, self.daily_build_errors, self.daily_socks_errors = 0, 0, 0
		self.start_time = str(datetime.now())


	def initialize_controller(self):
		controller = Controller.from_port(port = self.controller_port)
		if not controller:
			failure("Couldn't connect to Tor, Controller.from_port failed")
		if not controller.is_authenticated():
			controller.authenticate()
		controller.set_conf("__DisablePredictedCircuits", "1")
		controller.set_conf("__LeaveStreamsUnattached", "1")

		# Attaches a specific circuit to the given stream (event)
		def attach_stream(event):
			try:
				self.controller.attach_stream(event.id, self.curr_cid)
			except (OperationFailed, InvalidRequest), e:
				warning("Failed to attach stream to %s, unknown circuit. Closing stream..." % self.curr_cid)
				print("\tResponse Code: %s " % str(e.code))
				print("\tMessage: %s" % str(e.message))
				self.controller.close_stream(event.id)

		# An event listener, called whenever StreamEvent status changes
		def probe_stream(event):
			if event.status == 'DETACHED':
				warning("Stream Detached from circuit {0}...".format(self.curr_cid))
				print("\t" + str(vars(event)))
			if event.status == 'NEW' and event.purpose == 'USER':
				attach_stream(event)

		controller.add_event_listener(probe_stream, EventType.STREAM)
		return controller

	# Tell socks to use tor as a proxy
	def setup_proxy(self):
		socks.setdefaultproxy(SOCKS_TYPE, SOCKS_HOST, self.socks_port)
		socket.socket = socks.socksocket
		sock = socks.socksocket()
		sock.settimeout(self.socks_timeout)
		return sock

	def parse_relay_list(self, relay_source, relay_cache_time):
		data = None
		if relay_source.lower() == 'internet':
			if os.path.exists("./cache") and len(os.listdir("./cache")) > 0:
				most_recent_list = min(glob.iglob('./cache/*.json'), key=os.path.getctime)
				most_recent_time = datetime.strptime(most_recent_list,"./cache/relays-%y-%m-%d-%H.json")
				hours_since_last = (datetime.now() - most_recent_time).seconds/60/60
				if hours_since_last <= relay_cache_time:
					log("Found list of relays in cache that is {0} hours old. Using that...".format(hours_since_last))
					with open(most_recent_list) as f:
						r = f.read()
						data = json.loads(r)
			if not data:
				log("Downloading current list of relays.. (this may take a few seconds)")
				data = json.load(urllib2.urlopen('https://onionoo.torproject.org/details?type=relay&running=true&fields=nickname,fingerprint,or_addresses'))
				new_cache_file = datetime.now().strftime("./cache/relays-%y-%m-%d-%H.json")
				if not os.path.exists("./cache"):
					os.mkdir("./cache")
				with open(new_cache_file, 'w') as f:
					f.write(json.dumps(data))
		else:
			with open(relay_source) as f:
				r = f.read()
				data = json.loads(r)

		self.relay_list = {}
		self.fp_to_ip = {}
		for relay in data['relays']:
			if 'or_addresses' in relay:
				ip = relay['or_addresses'][0].split(':')[0]
				self.relay_list[ip] = relay['fingerprint'].encode('ascii', 'ignore')
				self.fp_to_ip[relay['fingerprint'].encode('ascii','ignore')] = ip

		success("There are {0} currently running Tor nodes.".format(len(self.relay_list)))

	def setup_job_queue(self, pair, input_file):
		self.job_queue = Queue.Queue()
		if pair:
			self.job_queue.put(pair)
			print("Ting mode selected : ({0},{1})".format(pair))
		elif input_file: 
			if input_file != "random":
				try:
					with open(input_file) as f:
						r = f.readlines()
						for l in r:
							self.job_queue.put(l.strip().split(" "))
				except IOError:
					failure("Could not find specified input file {0}".format(input_file))
				except:
					failure("Input file does not follow the specified format")
				print("Collect mode selected : input_file={0}".format(input_file))
			else:
				print("Random mode selected")

	def get_next_pair(self):
		if self.config['InputFile'] == 'random':
			x, y = choice(self.relay_list.keys()), choice(self.relay_list.keys())
			
			while (x == y):
				y = choice(self.relay_list.keys())
			return (x,y)
		else:
			
			try:
				print('test3')
				return self.job_queue.get(True,5)
			except Queue.Empty:
				print('test')
				return False

	def generate_circuits(self, fps):
		xy_circ = [self.w_fp, fps[0], fps[1], self.z_fp]
		x_circ = [self.w_fp, fps[0], self.z_fp]
		y_circ = [self.w_fp, fps[1], self.z_fp]
		return ((xy_circ, 'xy'), (x_circ, 'x'), (y_circ, 'y'))

	def try_daily_update(self):
		if (datetime.now().hour == 0 or datetime.now().hour == 12):
			if not self.recently_updated:
				msg = "Yesterday I measured {0} pairs in total. There were {1} circuit \
					   build errors, and {2} circuit connection errors. The other {3} were successful! I have been running since {4}.".format( \
					   	self.daily_pairs, self.daily_build_errors, self.daily_socks_errors, \
					   	(self.daily_pairs - self.daily_build_errors - self.daily_socks_errors), self.start_time)
				notify("Daily Update", msg)
				self.recently_updated = True
				self.daily_pairs, self.daily_build_errors, self.daily_socks_errors = 0, 0, 0
		else:
			self.recently_updated = False


	def build_circuits(self, circ):
		cid, last_exception, failures = None, None, 0

		while failures < self.max_circuit_builds:
			try:
				log("Building ciruit...")
				cid = self.controller.new_circuit(circ, await_build = True)
				success("Circuit built successfully.")
				return cid

			except(InvalidRequest, CircuitExtensionFailed) as exc:
				failures += 1
				if('message' in vars(exc)):
					warning("{0}".format(vars(exc)['message']))
				else:
					warning("Circuit failed to be created, reason unknown.")
				if cid is not None:
					self.controller.close_circuit(cid)
				last_exception = exc

		self.daily_build_errors += 1
		raise last_exception

	# Ping over Tor
	# Return array of times measured
	def ting(self, name):
		arr, num_seen = [], 0
		msg, done = pack("!c", "!"), pack("!c", "X")

		try:
			print("\tTrying to connect..")
			self.tor_sock.connect((self.destination_addr, self.destination_port))
			print(Color.SUCCESS + "\tConnected successfully!" + Color.END)

			while(num_seen < self.num_samples):
				start_time = time.time()
				self.tor_sock.send(msg)
				data = self.tor_sock.recv(1)
				end_time = time.time()
				arr.append((end_time - start_time))
				num_seen += 1

			self.tor_sock.send(done)
			try:
				self.tor_sock.shutdown(socket.SHUT_RDWR)
			except:
				pass
			self.tor_sock.close()

			return [round((x*1000),5) for x in arr]

		except socket.error, e:
			warning("Failed to connect using the given circuit: " + str(e) + "\nClosing connection.")
			if(self.tor_sock):
				try:
					self.tor_sock.shutdown(socket.SHUT_RDWR)
				except:
					pass
				self.tor_sock.close()
			self.daily_socks_errors += 1
			raise CircuitConnectionException("Failed to connect using the given circuit: ", name, str(e))

	def run(self):

		consecutive_fails = 0
		
		for pair in iter(lambda: self.get_next_pair(), ""):
			if pair == False:
				break
			self.daily_pairs += 1
			x, y = pair
			result = {}
			result['x'], result['y'] = {}, {}
			print(x)
			print(y)
			if "." in x:
				result['x']['ip'] = x
				result['x']['fp'] = self.relay_list[x]
			else:
				result['x']['fp'] = x
				if x in self.fp_to_ip.keys():
					result['x']['ip'] = self.fp_to_ip[x]
				else:
					result['x']['ip'] = '0.0.0.0'
			if "." in y:
				result['y']['ip'] = y
				result['y']['fp'] = self.relay_list[y]
			else:
				result['y']['fp'] = y
				if y in self.fp_to_ip.keys():
					result['y']['ip'] = self.fp_to_ip[y]
				else:
					result['y']['ip'] = '0.0.0.0'
			print(result)
			pair_fps = (result['x']['fp'],result['y']['fp'])
			pair_ips = (result['x']['ip'],result['y']['ip'])

			result['time_start'] = str(datetime.now()).split()[1]
			result['trials'] = []

			log("Measuring new pair: {0}->{1}".format(x, y))

			try:
				for i in range(self.num_repeats):
					log("Iteration %d" % (i + 1))

					trial = {}
					trial['start_time'] = str(datetime.now())
					circs = self.generate_circuits(pair_fps)

					for (circ, name) in circs:
						trial[name] = {}
						log("Tinging " + name)
						start_build = time.time()
						cid = self.build_circuits(circ)
						self.curr_cid = cid
						trial[name]['build_time'] = round((time.time() - start_build), 5)

						self.tor_sock = self.setup_proxy()

						start_ting = time.time()
						ting = self.ting(name)
						trial[name]['ting_time'] = round((time.time() - start_ting), 5)
						trial[name]['measurements'] = ting
						log("Ting complete, min for this circuit: %fms" % min(ting))

					trial['rtt'] = min(trial['xy']['measurements']) - (min(trial['x']['measurements']) / 2) - (min(trial['y']['measurements']) / 2)
					success("Predicted RTT between {0}->{1}: {2}ms".format(x, y, trial['rtt']))
					result['trials'].append(trial)
				consecutive_fails = 0

			except Exception as err:
				consecutive_fails += 1
				result['error'] = {}
				result['error']['type'] = err.__class__.__name__
				result['error']['details'] = str(err)
				warning("{0}: {1}".format(err.__class__.__name__, str(err)))
				log("Cooling down for five seconds...")
				time.sleep(5)

			if consecutive_fails >= 5:
				msg = "There have been 5 consecutive failures. The last pair attempted was " + str(pair)
				notify("Error", msg)
				consecutive_fails = 0

			self.result_queue.put(result, False)
			self.flush_to_file()
			self.try_daily_update()
			print('test2')

		self.controller.close()

def main():
  ########## CONFIG START ##########
	parser = argparse.ArgumentParser(prog='ting', description="Measure latency between either a pair of Tor relays (relay1,relay2), or a list of pairs, specified with the --input-file argument.")
	parser.add_argument('relay1', help="Tor relay identified by IP or Fingerprint", nargs='?', default=None)
	parser.add_argument('relay2', help="Tor relay identified by IP or Fingerprint", nargs='?', default=None)
	parser.add_argument('--output-file', help="store detailed results of run in JSON (default none)")
	parser.add_argument('--dest-port', help="port of local echo server (default 16667)")
	parser.add_argument('--num-samples', help="number of samples for each circuit (default 200)", type=int)
	parser.add_argument('--num-repeats', help="number of times to measure each pair (default 1)", type=int)
	parser.add_argument('--config-file', help="specify a file to read configuration options from (default ./tingrc)", default="tingrc")
	parser.add_argument('--input-file', help="read list of relay pairs to measure from file, which contains one space-separated pair of fingerprints or ips per line (default none)")
	args = vars(parser.parse_args())

	try:
		f = open(args['config_file'])
	except IOError:
		failure("Couldn't find a tingrc config file. Try running ./configure")
	log("Read config file " + args['config_file'])
	r = f.readlines()
	f.close()

	config = {}
	for l in r:
		pair = l.strip().split()
		
		try:
			config[pair[0]] = int(pair[1])
		except ValueError:
			config[pair[0]] = pair[1]
	if not 'InputFile' in config:
		config['InputFile'] = None
	
	arg_overrides = [(args['num_repeats'], 'NumRepeats'), (args['num_samples'], 'NumSamples'), \
					(args['dest_port'], 'DestinationPort'), (args['input_file'], 'InputFile'),(args['output_file'], 'ResultsDirectory')]

	for override in arg_overrides:
		if not override[0] is None:
			try:
				config[override[1]] = int(override[0])
			except ValueError:
				config[override[1]] = override[0]
	
	if args['relay1'] and args['relay2']:
		config['Pair'] = (args['relay1'],args['relay2'])
	else:
		config['Pair'] = None
		
	
	########## CONFIG END ##########

	results_queue = Queue.Queue()

	def catch_sigint(signal, frame):
		flush_to_file()
		sys.exit(0)

	# Flush anything waiting to be written to the output file on its own line
	# Accumulating all the results will be done post-processing
	def flush_to_file():
		while(not results_queue.empty()):
			result = results_queue.get(False)
			with open(get_current_log(), 'a') as f:
				f.write(json.dumps(result))
				f.write("\n")

	signal.signal(signal.SIGINT, catch_sigint) # Still write output even if process killed

	worker = TingClient(config, results_queue, flush_to_file)
	worker.run()

	flush_to_file()

if __name__ == "__main__":
	main()
